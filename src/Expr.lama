-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _ -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _ -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (
      fun ([c, vals], e) {
        case eval (c, e) of
          [c, v] -> [c, v : vals]
        esac
      },
      [c, {}],
      exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, world], expr) {
  fun addDefs (ds, st) {
    fun addDef (st, d) {
      case d of
        Fun (name, args, body) -> st.addFunction (name, args, body)
      | Var (names) -> st.addNames (names)
      esac
    }
    foldl (addDef, st, ds)
  }

  case (expr) of
    Var (s) -> [c, st.lookup (s)]
  | Const (n) -> [c, n]
  | Binop (o, e1, e2) ->
      case eval (c, e1) of
        [c, v1] ->
          case eval (c, e2) of
            [c, v2] -> [c, evalOp (o, v1, v2)]
          esac
      esac
  | Read (s) -> 
      case readWorld (world) of
        [n, world] -> [[st <- [s, n], world], None] -- ัะท...
      esac
  | Write (e) ->
      case eval (c, e) of
        [[st, world], v] -> [[st, writeWorld (v, world)], None]
      esac
  | Seq (e1, e2) ->
      case eval (c, e1) of
        [c, _] -> eval (c, e2)
      esac
  | Assn (e1, e2) -> 
      case eval (c, e1) of
        [c, s] ->
          case eval (c, e2) of
            [[st, world], n] -> [[st <- [s, n], world], n]
          esac
      esac
  | Ref (s) -> [c, s]
  -- | Var (s) -> [c, st (s)]
  | While (e, s) ->
      case eval (c, e) of
        [c, v] -> if v then eval (c, Seq (s, While (e, s))) else [c, None] fi
      esac
  | If (cond, bt, bf) ->
      case eval (c, cond) of
        [c, v] -> if v then eval (c, bt) else eval (c, bf) fi
      esac
  -- | DoWhile (Scope (defs, body), cond) -> eval (c, Scope (defs, DoWhile (body, cond)))
  | DoWhile (b, cond) -> eval (c, Seq (b, While (cond, b)))
  | Skip -> [c, None]
  | Ignore (e) -> eval (c, e)

  | Scope (defs, expr) ->
      case st.enterScope of
        st ->
          case addDefs (defs, st) of
            st -> 
              case eval ([st, world], expr) of
                [[st, world], v] -> [[st.leaveScope, world], v]
              esac
          esac
      esac 
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}