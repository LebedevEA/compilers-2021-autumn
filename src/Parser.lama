-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun mkOps () {
  fun mkBinop (l, op, r) {
    Binop (op, l, r)
  }

  var ops = {
    [Left, {"!!"}],
    [Left, {"&&"}],
    [Nona, {"==", "!=", "<=", "<", ">=", ">"}],
    [Left, {"+", "-"}],
    [Left, {"*", "/", "%"}]
  };

  map (fun ([lnr, lops]) {
    [lnr, map (fun (op) { [s (op), mkBinop] }, lops)]
  } , ops)
}

-- Primary expression
var primary = 
      memo $ eta syntax (
        x=decimal { Const (stringInt (x)) } |
        x=lident  { Var (x) }               |
        inbr[s ("("), exp, s (")") ]
      ),
    exp = memo $ eta (expr (mkOps (), primary));

var stmt = memo $ eta syntax (
    l=lident s [":="] e=exp { Assn (l, e) }
  | l=stmt s [";"] r=stmt end { Seq (l, r) }
  | kSkip { Skip }
  | kRead i=inbr[s ("("), lident, s (")")] { Read (i) }
  | kWrite i=inbr[s ("("), exp, s (")")] { Write (i) }
);

-- Public top-level parser
public parse = stmt;
             
