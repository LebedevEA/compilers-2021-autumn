-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _ -> v
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val -> error ("value expected", loc)
  | Weak -> Seq (v, Const (0))
  | _ -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [
    syntax (pos -s[op]), 
    fun (l, loc, r) {
      fun (a) {
        assertValue (a, Binop (op, l (Val), r (Val)), loc)
      }
    }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None] -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Var (ds) ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

fun mkOps () {
  {[Right, {
      [s (":="),
        fun (l, loc, r) {
          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
        }
      ]
    }],
    [Left , map (binop, {"!!"})],
    [Left , map (binop, {"&&"})],
    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
    [Left , map (binop, {"+", "-"})],
    [Left , map (binop, {"*", "/", "%"})]
    }
}

var primary = 
      memo $ eta syntax (
          loc=pos x=decimal {
            fun (a) {
              assertValue (a, Const (stringInt (x)), loc)
            }
          }
        | x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {
            fun (a) {
              case args of
                None -> 
                  case a of
                    Ref -> Ref (x)
                  | Void -> Ignore (Var (x))
                  | _ -> Var (x)
                  esac
              | Some (args) -> assertValue (a, Call (x, args))
              esac
            }
          } 
        | loc=pos kRead i=inbr[s ("("), lident, s (")")] {
            fun (a) { 
              assertVoid (a, Read (i), loc) 
            } 
          }
        | loc=pos kWrite e=inbr[s ("("), exp, s (")")] { 
            fun (a) {
              assertVoid (a, Write (e (Val)), loc)
            }
          }
        | inbr [s ("("), scopeExpr, s (")")]
        | loc=pos kWhile e=exp kDo s=scopeExpr kOd {
            fun (a) {
              assertVoid (a, While (e (Val), s (Void)), loc)
            }
          }
        | kIf cond=exp kThen bt=scopeExpr kFi { 
            fun (a) { 
              If (cond (Val), bt (a), Skip)
            } 
          }
        | kIf cond=exp kThen bt=scopeExpr bf=ifEnd kFi {
            fun (a) {
              If (cond (Val), bt (a), bf (a))
            }
          }
        | loc=pos kDo b=scopeExpr kWhile cond=exp kOd { 
            fun (a) {
              assertVoid (
                a, 
                case b (Void) of
                  Scope (defs, body) -> Scope (defs, DoWhile (body, cond (Val)))
                | body -> DoWhile (body, cond (Val))
                esac, 
                loc
              )
            }
          }
        | loc=pos kSkip { fun (a) { assertVoid (a, Skip, loc) } }
        | loc=pos kFor e1=scopeExpr s [","] e2=exp s [","] e3=exp
              kDo b=scopeExpr kOd {
            fun (a) { 
              assertVoid (
                a, 
                case e1 (Void) of
                  Scope (defs, e1) -> Scope (defs, (Seq (e1, While (e2 (Val), Seq (b (Void), e3 (Void))))))
                | e1 -> (Seq (e1, While (e2 (Val), Seq (b (Void), e3 (Void)))))
                esac, 
                loc
              )
            }
          }
        -- | $(failure ("the rest of primary parsing in not implemented\n"))
      ),
    ifEnd =
      memo $ eta syntax (
          kElse b=exp { fun (a) { b (a) } }
        | kElif cond=exp kThen bt=scopeExpr bf=ifEnd {
            fun (a) {
              If (cond (Val), bt (a), bf (a))
            }
          }
        | kElif cond=exp kThen b=scopeExpr { 
            fun (a) { 
              If (cond (Val), b (a), Skip) 
            } 
          }
      ),
      scopeExpr = 
        memo $ eta syntax (
          ds=definition* e=exp? {
            fun (a) {
              fun (e) {
                case ds of
                  {} -> e
                | _  -> expandScope (ds, e) 
                esac
              } (
                case e of 
                  Some (e) -> e (a)
                | _        -> Skip
                esac
              )
            }
          }
        ),
      definition = 
        memo $ eta syntax (
            kVar ds=list[syntax (lident (s["="] e=basic {e (Val)})?)] s[";"] {Var (ds)} 
          | kFun name=lident
            args=inbr[s("("), list0 (lident), s(")")]
            body=inbr[s("{"), scopeExpr, s("}")] {
              Fun (name, args, body (Weak))
            }
        ),                                    
    basic = memo $ eta (expr (mkOps (), primary)),
    exp = 
      memo $ eta syntax (
          basic 
        | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}}
      );

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
