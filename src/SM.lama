-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)    -> sprintf ("LABEL %s", s)
  | LABEL  (s, f)    -> sprintf ("LABEL %s, %d", s, f)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  | META (m)         -> sprintf ("META %s", m.string)
  | PATT (p)         -> sprintf ("PATT %s", p.string)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
    fun eval (c@[stack, cstack, st, world], insns) {
      -- failure (showSM (insns));
      case insns of
        {} -> c
      | i:is ->
        case i of
          DUP ->
            case stack of
              s:stack -> eval ([s:s:stack, cstack, st, world], is)
            esac
        | BINOP (s) ->
            case stack of
              y:x:ts -> eval ([evalOp (s, x, y):ts, cstack, st, world], is)
            | _ -> failure ("SM: It must be at least 2 elements in stack to run binop\n")
            esac
        | LD (x) -> 
            eval ([lookup (st, x):stack, cstack, st, world], is)
        | LDA (x) -> eval ([Ref (x):stack, cstack, st, world], is)
        | ST (x) -> 
            case stack of
              t:ts -> 
                assign (st, x, t);
                eval ([t:ts, cstack, st, world], is)
            | _ -> failure ("SM: Cannot ST from empty stack\n")
            esac
        | DROP -> 
            case stack of
              _:stack -> eval([stack, cstack, st, world], is)
            esac
        | CONST (n) -> eval ([n:stack, cstack, st, world], is)
        | LABEL (l) -> eval (c, is)
        | JMP (l) -> eval (c, fromLabel (env, l))
        | CJMP (Z, l) ->
            case stack of
              b:ts -> 
                if b == 0 
                then eval ([ts, cstack, st, world], fromLabel (env, l))
                else eval ([ts, cstack, st, world], is)
                fi
            esac
        | CJMP (NZ, l) ->
            case stack of
              b:ts -> 
                if b != 0 
                then eval ([ts, cstack, st, world], fromLabel (env, l))
                else eval ([ts, cstack, st, world], is)
                fi
            esac
        | GLOBAL (x) -> assign (st, Glb (x), 0); eval ([stack, cstack, st, world], is)
        | BEGIN (name, nargs, nvars) ->
            case take (stack, nargs) of
              [stack, args] -> 
                case foldl (
                  fun ([st, narg], arg) {
                    st.assign (Arg (narg), arg);
                    [st, narg + 1]
                  },
                  [makeState (nargs, nvars), 0],
                  args
                ) of 
                  [st, _] -> eval ([stack, cstack, st, world] , is)
                esac
            esac
        | END ->
            case cstack of
              {} -> [stack, {}, st, world]
            | [st, qs]:cs -> eval ([stack, cs, st, world], qs)
            esac
        | CALL (lab, nargs) ->
            eval ([stack, [st, is]:cstack, st, world], env.fromLabel (lab))
        | BUILTIN (funn, nargs) ->
            case take (stack, nargs) of
              [stack, args] ->
                case evalBuiltin (funn, args, world) of
                  [res, world] -> eval ([res:stack, cstack, st, world], is)
                esac
            esac
        | ARRAY (n) ->
            case stack.take (n) of
              [_:stack, vals] -> eval ([listArray (vals):stack, cstack, st, world], is)
            esac
        | ELEM ->
            case stack of
              i:a:stack -> 
                var ai = 
                  case a of
                    Sexp (_, a) -> a[i]
                  | _ -> a[i]
                  esac; 
                eval ([ai:stack, cstack, st, world], is)
            esac
        | STA ->
            case stack of
              v:Ref (_):Ref (x):stack -> 
                assign (st, x, v);
                eval ([v:stack, cstack, st, world], is)
            | v:i:a:stack -> 
                case a of
                  Sexp (_, a) -> a[i] := v
                | _ -> a[i] := v
                esac; 
                eval ([v:stack, cstack, st, world], is)
            esac
        | STRING (s) -> eval ([s:stack, cstack, st, world], is)
        | SEXP (name, n) ->
            case take (stack, n) of
              [_:stack, vals] -> eval ([Sexp (name, listArray (vals)):stack, cstack, st, world], is)
            esac
        | PATT ([ename, esz]) ->
            case stack of
              Sexp (aname, elems):stack -> 
                var matched = compare (ename, aname) == 0 && esz == length(elems);
                eval ([matched:stack, cstack, st, world], is)
            esac
        | META (msg) -> failure (msg)
        esac
    esac
  }
  

  -- printf ("%s\n", showSM (insns));
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | Arg (x) -> Arg (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun addGlobals (env, globalDefs, names) {
    if env.isGlobal
    then 
      foldl (
        fun (defs, name) {
          defs <+ GLOBAL (name)
        },
        globalDefs,
        names
      )
    else globalDefs
    fi
  }

  fun compileMany (lab, env, args) {
    compile (
      lab, 
      env, 
      foldl (
        fun (stmt, arg) { 
          Seq (stmt, arg)
        },
        Skip,
        args
      )
    )
  }
  fun compile (lab, env, stmt) {
    case stmt of
      Skip -> [false, env, emptyBuffer ()]
    | Var (x) -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]
    | Ref (x) -> [false, env, singletonBuffer (LDA (lookupVar (env, x))) <+ DUP]
    | Const (n) -> [false, env, singletonBuffer (CONST (n))]
    | String (s) -> [false, env, singletonBuffer (STRING (s))]
    | Array (elems) ->
        case env.genLabel of
          [elemsLab, env] ->
            case compileMany (elemsLab, env, elems) of
              [labUsed, env, code] -> [
                false,
                env,
                emptyBuffer ()
                <+ CONST (size (elems))
                <+> code
                <+ ARRAY (size (elems))
              ]
            esac
        esac
    | ElemRef (a, i) ->
        case env.genLabel of
          [elemRefLab, env] ->
            case compileMany (elemRefLab, env, {a, i}) of
              [labUsed, env, code] -> [
                false,
                env,
                code
                <+> label (elemRefLab, labUsed)
              ]
            esac
        esac
    | Elem (a, i) ->
        case env.genLabel of
          [elemRefLab, env] ->
            case compileMany (elemRefLab, env, {a, i}) of
              [labUsed, env, code] -> [
                false,
                env,
                code
                <+> label (elemRefLab, labUsed)
                <+ ELEM
              ]
            esac
        esac
    | Sexp (name, exprs) -> 
        case env.genLabel of
          [endExprsLab, env] ->
            case compileMany (endExprsLab, env, exprs) of
              [labUsed, env, code] -> [
                false,
                env,
                emptyBuffer ()
                <+ CONST (size (exprs) + 1)
                <+> code
                <+> label (endExprsLab, labUsed)
                <+ SEXP (name, size (exprs))
              ]
            esac
        esac
    | Ignore (e) ->
        case genLabel (env) of
          [lab, env] ->
            case compile (lab, env, e) of
              [labUsed, env, code] -> [false, env, code <+> label (lab, labUsed) <+ DROP]
            esac
        esac
    | Binop (o, e1, e2) ->
        case genLabels (env, 2) of
          [endLab1, endLab2, env] ->
            case compile (endLab1, env, e1) of
              [endUsed1, env, code1] ->
                case compile (endLab2, env, e2) of
                  [endUsed2, env, code2] -> 
                    [false, env, 
                      code1 <+> label (endLab1, endUsed1) <+> 
                      code2 <+> label (endLab2, endUsed2) <+ 
                      BINOP (o)]
                esac
            esac
        esac
    | Set (x, e) -> compile (lab, env, Assn (Ref (x), e))
    | Assn (x, e) ->
        -- var stia = 
        --   case x of 
        --     ElemRef (_, _) -> STA
        --   | _ -> STI
        --   esac;
        case genLabels (env, 2) of
          [endLabX, endLabE, env] ->
            case compile (endLabX, env, x) of
              [endUsedX, env, codeX] ->
                case compile (endLabE, env, e) of
                  [endUsedE, env, codeE] -> 
                    [false, env, 
                      codeX <+> label (endLabX, endUsedX) <+> 
                      codeE <+> label (endLabE, endUsedE) <+ 
                      STA]
                      -- stia]
                esac
            esac
        esac
    | Seq (s1, s2) ->
        case genLabel (env) of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> 
                      [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, bt, bf) ->
        case genLabels (env, 2) of
          [condLab, l, env] -> 
            case compile (condLab, env, cond) of
              [condUsed, env, condCode] ->
                case compile (lab, env, bt) of
                  [_, env, trueCode] ->
                    case compile (lab, env, bf) of
                      [_, env, falseCode] ->
                        [true, env, 
                          emptyBuffer () 
                          <+> condCode
                          <+> label (condLab, condUsed)
                          <+ CJMP (Z, l)
                          <+> trueCode
                          <+ JMP (lab)
                          <+> label (l, true)
                          <+> falseCode]
                    esac
                esac
            esac
        esac
    | While (cond, b) ->
        case genLabels (env, 3) of
          [lc, lb, condEnd, env] ->
            case compile (lc, env, b) of
              [_, env, bCode] ->
                case compile (condEnd, env, cond) of
                  [endUsed, env, condCode] ->
                    [false, env,
                      emptyBuffer ()
                      <+ JMP (lc)
                      <+> label (lb, true)
                      <+> bCode
                      <+> label (lc, true)
                      <+> condCode
                      <+> label (condEnd, endUsed)
                      <+ CJMP (NZ, lb)]
                esac
            esac
        esac
      | DoWhile (b, cond) ->
          case genLabels (env, 3) of
            [beg, le, condEnd, env] ->
                case compile (le, env, b) of
                  [leUsed, env, bCode] ->
                    case compile (condEnd, env, cond) of
                      [endUsed, env, condCode] ->
                        [false, env,
                          emptyBuffer ()
                          <+> label (beg, true)
                          <+> bCode
                          <+> label (le, leUsed)
                          <+> condCode
                          <+> label (condEnd, endUsed)
                          <+ CJMP (NZ, beg)]
                      esac
                esac
          esac
    | Scope (defs, expr) ->
        case beginScope (env) of
          env ->
            case foldl (
              fun ([env, funs, globalDefs], def) {
                case def of
                  Fun (name, args, body) -> 
                    case genFunLabel (env, name) of
                      [lab, env] -> [
                        addFun (env, name, lab, size (args)),
                        [lab, args, body] : funs,
                        globalDefs
                      ]
                    esac
                | Var (names) -> [
                    addVars (env, names),
                    funs,
                    addGlobals (env, globalDefs, names)
                  ]
                | Val (names) -> [
                    addVars (env, names),
                    funs,
                    addGlobals (env, globalDefs, names)
                  ]
                esac
              },
              [env, {}, emptyBuffer ()],
              defs
            ) of
              [env, funs, globalDefs] -> 
                case foldl (
                  fun (env, [lab, args, body]) {
                    rememberFun (env, lab, args, body)
                  },
                  env,
                  funs
                ) of
                  env -> 
                    case compile (lab, env, expr) of
                      [labUsed, env, code] -> 
                        [labUsed, leaveScope (env), globalDefs <+> code]
                    esac
                esac
            esac
        esac
    | Case (name, branches) ->
        case env.genLabel of
          [endLab, env] ->
            case lookupVar (env, name) of
              exp ->
                fun deepLab (lab, depth) {
                  if depth == 0 
                  then lab 
                  else sprintf ("%s_with_depth_%d", lab, depth)
                  fi
                }

                fun compileBranch (env, pattern, body, caseEndLab) {
                  fun compilePattern (env, pattern, lab, depth) {
                    case pattern of
                      Wildcard -> [env, emptyBuffer (), depth]
                    | Named (_, pattern) -> compilePattern (env, pattern, lab, depth)
                    | Const (n) -> [
                        env,
                        emptyBuffer ()
                        <+ DUP
                        <+ CONST (n)
                        <+ BINOP ("==")
                        <+ CJMP (Z, deepLab (lab, depth)),
                        depth
                      ]
                    | Sexp (name, elems) ->
                        case foldl (
                          fun ([env, code, i, maxDepth0], elem) {
                            case compilePattern (env, elem, lab, depth + 1) of
                              [env, elemCode, maxDepth1] -> [
                                env,
                                code <+ DUP <+ CONST (i) <+ ELEM <+> elemCode <+ DROP,
                                i + 1,
                                if maxDepth0 > maxDepth1 then maxDepth0 else maxDepth1 fi
                              ]
                            esac
                          },
                          [env, emptyBuffer (), 0, depth],
                          elems
                        ) of
                          [env, code, _, maxDepth] -> [
                            env,
                            emptyBuffer ()
                            <+ DUP
                            <+ PATT ([name, size (elems)])
                            <+ CJMP (Z, deepLab (lab, depth))
                            <+> code,
                            maxDepth
                          ]
                        esac
                    esac
                  }

                  fun compileDrops (lab, depth) {
                    case depth of
                      0 -> emptyBuffer () <+ LABEL (deepLab (lab, depth))
                    | _ -> 
                        emptyBuffer () 
                        <+ LABEL (deepLab (lab, depth))
                        <+ DROP
                        <+> compileDrops (lab, depth - 1)
                    esac
                  }

                  case env.genLabel of
                    [branchEndLab, env] ->
                      case compilePattern (env, pattern, branchEndLab, 0) of
                        [env, patternCode, depth] ->
                          case compile (caseEndLab, env, body) of
                            [_, env, bodyCode] ->
                              case compileDrops (branchEndLab, depth) of
                                dropsCode -> [
                                    env, 
                                    emptyBuffer ()
                                    <+> patternCode 
                                    <+ DROP
                                    <+> bodyCode
                                    <+ JMP (caseEndLab)
                                    <+> dropsCode
                                  ]
                              esac
                          esac
                      esac
                  esac
                }

                case foldl (
                  fun ([env, code], [p, b]) {
                    case compileBranch (env, p, b, endLab) of
                      [env, branchCode] -> [env, code <+> branchCode]
                    esac
                  },
                  [env, emptyBuffer ()],
                  branches
                ) of
                  [env, branchCode] -> [false, env,
                    emptyBuffer ()
                    <+ LD (exp) 
                    <+> branchCode 
                    <+ META ("Match failed") 
                    <+ LABEL (endLab)
                  ]
                esac
            esac
        esac
    | Call (funn, args) ->
        case env.genLabel of
          [callLab, env] ->
            case compileMany (callLab, env, args) of
              [labUsed, env, code] ->
                case env.lookupFun (funn) of
                  Fun (flab, nargs) ->
                    [false, env, 
                      code
                      <+> label (callLab, labUsed)
                      <+ (
                        case flab of
                          Builtin (flab) -> BUILTIN (flab, nargs)
                        | _ -> CALL (flab, nargs)
                        esac
                      )
                    ]
                esac
            esac
        esac
    | a                 ->  failure ("Not implemented: %s\n", a.string)
    esac
  }

  fun addFunctions (env, code) {
    fun genCode (env, Fun (fLabel, args, body, state)) {
      case env.beginFun (state).addArgs (args).genLabel of
        [endLab, env] -> 
          case compile (endLab, env, body) of
            [endLabUsed, env, code] ->
              var funCode = 
                emptyBuffer ()
                <+ LABEL (fLabel)
                <+ BEGIN (fLabel, args.size, env.getLocals)
                <+> code
                <+> label (endLab, endLabUsed) 
                <+ END;
              addFunctions (env, funCode)
          esac
      esac
    }
    case env.getFuns of
      [funs, env] ->
        foldl (
          fun ([code, env], funn) {
            case genCode (env, funn) of
              [newCode, env] -> [code <+> newCode, env]
            esac
          },
          [code, env],
          funs
        )
    esac
  }

  case initCompEnv ()
          .beginScope
          .addFun ("read", Builtin ("read"), 0)
          .addFun ("write", Builtin ("write"), 1)
          .addFun ("length", Builtin ("length"), 1)
          .genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
        [endLabUsed, env, code] ->
          var mainCode =
            emptyBuffer ()
            <+ LABEL ("main")
            <+ BEGIN ("main", 0, env.getLocals)
            <+> code
            <+> label (endLab, endLabUsed) 
            <+ END;
          getBuffer $ addFunctions (env, mainCode) [0]
      esac
  esac
}
