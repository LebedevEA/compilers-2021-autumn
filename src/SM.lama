-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, st, world], insns) {
  case insns of
    {} -> c
  | i:is ->
     case i of
      READ -> 
        case readWorld (world) of
          [n, nworld] -> eval (env, [n:stack, st, nworld], is)
        esac
    | WRITE -> 
        case stack of
          t:ts -> eval (env, [ts, st, writeWorld (t, world)], is)
        | _ -> failure ("SM: Cannot write from empty stack\n")
        esac
    | BINOP (s) -> 
        case stack of
          y:x:ts -> eval (env, [evalOp (s, x, y):ts, st, world], is)
        | _ -> failure ("SM: It must be at least 2 elements in stack to run binop\n")
        esac
    | LD (x) -> eval (env, [st (x):stack, st, world], is)
    | LDA (x) -> eval (env, [x:stack, st, world], is)
    | ST (x) -> 
        case stack of
          t:ts -> eval (env, [t:ts, st <- [x, t], world], is)
        | _ -> failure ("SM: Cannot ST from empty stack\n")
        esac
    | STI ->
        case stack of
          v:x:s -> eval (env, [v:s, st <- [x, v], world], is)
        esac
    | DROP -> 
        case stack of
          _:stack -> eval(env, [stack, st, world], is)
        esac
    | CONST (n) -> eval (env, [n:stack, st, world], is)
    | LABEL (l) -> eval (env, c, is)
    | JMP (l) -> eval (env, c, fromLabel (env, l))
    | CJMP (Z, l) ->
        case stack of
          b:ts -> 
            if b == 0 
            then eval (env, [ts, st, world], fromLabel (env, l))
            else eval (env, [ts, st, world], is)
            fi
        esac
    | CJMP (NZ, l) ->
        case stack of
          b:ts -> 
            if b != 0 
            then eval (env, [ts, st, world], fromLabel (env, l))
            else eval (env, [ts, st, world], is)
            fi
        esac
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip -> [false, env, emptyBuffer ()]
    | Var (x) -> [false, env, singletonBuffer (LD (x))]
    | Ref (x) -> [false, env, singletonBuffer (LDA (x))]
    | Const (n) -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e) ->
        case env.genLabel of
          [lab, env] ->
            case compile (lab, env, e) of
              [labUsed, env, code] -> [false, env, code <+> label (lab, labUsed) <+ DROP]
            esac
        esac
    | Binop (o, e1, e2) ->
        case env.genLabels (2) of
          [endLab1, endLab2, env] ->
            case compile (endLab1, env, e1) of
              [endUsed1, env, code1] ->
                case compile (endLab2, env, e2) of
                  [endUsed2, env, code2] -> 
                    [false, env, 
                      code1 <+> label (endLab1, endUsed1) <+> 
                      code2 <+> label (endLab2, endUsed2) <+ 
                      BINOP (o)]
                esac
            esac
        esac
    | Read (x) -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e) ->
        case env.genLabel of
          [endLab, env] ->
            case compile (endLab, env, e) of
              [labUsed, env, code] -> [false, env, code <+> label (endLab, labUsed) <+ WRITE]
            esac
        esac
    | Assn (x, e) ->
        case env.genLabels (2) of
          [endLabX, endLabE, env] ->
            case compile (endLabX, env, x) of
              [endUsedX, env, codeX] ->
                case compile (endLabE, env, e) of
                  [endUsedE, env, codeE] -> 
                    [false, env, 
                      codeX <+> label (endLabX, endUsedX) <+> 
                      codeE <+> label (endLabE, endUsedE) <+ 
                      STI]
                esac
            esac
        esac
    | Seq (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> 
                      [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, bt, bf) ->
        case env.genLabels (2) of
          [condLab, l, env] -> 
            case compile (condLab, env, cond) of
              [condUsed, env, condCode] ->
                case compile (lab, env, bt) of
                  [_, env, trueCode] ->
                    case compile (lab, env, bf) of
                      [_, env, falseCode] ->
                        [true, env, 
                          emptyBuffer () 
                          <+> condCode
                          <+> label (condLab, condUsed)
                          <+ CJMP (Z, l)
                          <+> trueCode
                          <+ JMP (lab)
                          <+> label (l, true)
                          <+> falseCode]
                    esac
                esac
            esac
        esac
    | While (cond, b) ->
        case env.genLabels (3) of
          [lc, lb, condEnd, env] ->
            case compile (lc, env, b) of
              [_, env, bCode] ->
                case compile (condEnd, env, cond) of
                  [endUsed, env, condCode] ->
                    [false, env,
                      emptyBuffer ()
                      <+ JMP (lc)
                      <+> label (lb, true)
                      <+> bCode
                      <+> label (lc, true)
                      <+> condCode
                      <+> label (condEnd, endUsed)
                      <+ CJMP (NZ, lb)]
                esac
            esac
        esac
      | DoWhile (b, cond) ->
          case env.genLabels (3) of
            [beg, le, condEnd, env] ->
                case compile (le, env, b) of
                  [leUsed, env, bCode] ->
                    case compile (condEnd, env, cond) of
                      [endUsed, env, condCode] ->
                        [false, env,
                          emptyBuffer ()
                          <+> label (beg, true)
                          <+> bCode
                          <+> label (le, leUsed)
                          <+> condCode
                          <+> label (condEnd, endUsed)
                          <+ CJMP (NZ, beg)]
                      esac
                esac
          esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
