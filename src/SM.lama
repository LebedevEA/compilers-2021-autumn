-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, st, world], insns) {
  case insns of
    {} -> c
  | i:is ->
     case i of
      READ -> 
        case readWorld (world) of
          [n, nworld] -> eval ([n:stack, st, nworld], is)
        esac
    | WRITE -> 
        case stack of
          t:ts -> eval ([ts, st, writeWorld (t, world)], is)
        | _ -> failure ("SM: Cannot write from empty stack\n")
        esac
    | BINOP (s) -> 
        case stack of
          y:x:ts -> eval ([binop (s) (x, y):ts, st, world], is)
        | _ -> failure ("SM: It must be at least 2 elements in stack to run binop\n")
        esac
    | LD (x) -> eval ([st (x):stack, st, world], is)
    | ST (x) -> 
        case stack of
          t:ts -> eval ([ts, st <- [x, t], world], is)
        | _ -> failure ("SM: Cannot ST from empty stack\n")
        esac
    | CONST (n) -> eval ([n:stack, st, world], is)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (s) -> { LD (s) }
  | Const (c) -> { CONST (c) }
  | Binop (o, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ { BINOP (o) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case (stmt) of
    Assn (s, e) -> compileExpr (e) +++ { ST (s) }
  | Seq (s1, s2) -> compileSM (s1) +++ compileSM (s2)
  | Skip -> { }
  | Read (s) -> { READ, ST (s) }
  | Write (e) -> compileExpr (e) +++ { WRITE }
  esac
}
